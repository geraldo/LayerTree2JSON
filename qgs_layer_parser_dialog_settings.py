# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QgsLayerParserDialogSettings
                                 A QGIS plugin
 Parse QGIS 3 project files and write a JSON config file with layer information.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2022-07-05
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Gerald Kogler/PSIG
        email                : geraldo@servus.at
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import webbrowser
from datetime import datetime

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.PyQt.QtCore import QSettings, QUrl

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'qgs_layer_parser_dialog_settings.ui'))


class Settings():

    activeProject = -1
    # [0]: project name
    # [1]: QGS file
    # [2]: QGS path
    # [3]: JSON path base
    # [4]: JSON path extended
    # [5]: Server Host
    # [6]: FTP User
    # [7]: FTP Password
    userProjects = []

    def __init__(self):
        self.readSettings()

    def readSettings(self):
        '''Load the user selected settings. The settings are retained even when
        the user quits QGIS. This just loads the saved information into variables,
        but does not update the widgets. The widgets are updated with showEvent.'''
        qset = QSettings()

        self.activeProject = qset.value('/QgsLayerParser/ActiveProject', -1)

        self.userProjects = qset.value('/QgsLayerParser/UserProjects', 0)
        if not isinstance(self.userProjects, list):
            self.userProjects = []


settings = Settings()


class QgsLayerParserDialogSettings(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, qgsLayerParser, iface, parent=None):
        """Constructor."""
        super(QgsLayerParserDialogSettings, self).__init__(parent)
        self.qgsLayerParser = qgsLayerParser
        self.iface = iface
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        self.isNew = False
        self.buttonShowJson.clicked.connect(self.showOnlineFile)
        self.buttonShowProject.clicked.connect(self.showProject)
        self.buttonTest.clicked.connect(self.testConnection)
        self.buttonBoxSettings.helpRequested.connect(self.help)

        self.inputHost.textChanged.connect(self.checkEnabled)
        self.inputQgsPath.textChanged.connect(self.checkEnabled)
        self.inputJsonPath.textChanged.connect(self.checkEnabled)
        self.inputJsonPath2.textChanged.connect(self.checkEnabled)

        self.readSettings()

    def readSettings(self):
        '''Load the user selected settings. The settings are retained even when
        the user quits QGIS. This just loads the saved information into variables,
        but does not update the widgets. The widgets are updated with showEvent.'''
        qset = QSettings()

        settings.readSettings()

    def accept(self):
        '''Accept the settings and save them for next time.'''
        self.editProject()

        if settings.userProjects:
            QSettings().setValue('/QgsLayerParser/UserProjects', settings.userProjects)
        else:
            QSettings().setValue('/QgsLayerParser/UserProjects', 0)

        # update active project
        self.qgsLayerParser.update_project_vars()

        # The values have been read from the widgets and saved to the registry.
        # Now we will read them back to the variables.
        #self.readSettings()
        self.close()

    def editProject(self):
        name = self.inputProjectName.text().strip()
        qgsFile = self.inputQgsFile.text().strip()
        qgsPath = self.inputQgsPath.text().strip()
        jsonPath = self.inputJsonPath.text().strip()
        jsonPath2 = self.inputJsonPath2.text().strip()
        host = self.inputHost.text().strip()
        user = self.inputUser.text().strip()
        password = self.inputPassword.text().strip()

        if name:
            if not qgsFile:
                qgsFile = name + '.qgs'
            if not qgsPath:
                qgsPath = '/home/me/' + name + '/'
            if not jsonPath:
                jsonPath = '/var/www/html/'
            if not jsonPath2:
                jsonPath2 = name + '/js/data/'

            project = [name, qgsFile, qgsPath, jsonPath, jsonPath2, host, user, password]
            currentIndex = self.qgsLayerParser.dlg.inputProjects.currentIndex()
            if self.isNew:
                currentIndex = len(settings.userProjects)
                settings.userProjects.append(project)
                QSettings().setValue('/QgsLayerParser/ActiveProject', currentIndex)
            else:
                settings.userProjects[currentIndex] = project

            self.checkEnabled()

            names = []
            for item in settings.userProjects:
                names.append(item[0])
            self.qgsLayerParser.dlg.inputProjects.clear()
            self.qgsLayerParser.dlg.inputProjects.addItems(names)
            self.qgsLayerParser.dlg.inputProjects.setCurrentIndex(currentIndex)

            self.qgsLayerParser.dlg.buttonEditProject.setEnabled(True);
            self.qgsLayerParser.dlg.buttonRemoveProject.setEnabled(True);

    def checkEnabled(self):
            fields_filled = self.inputHost.text() != "" and self.inputQgsPath.text() != "" and self.inputJsonPath.text() != "" and self.inputJsonPath2.text() != ""
            self.buttonShowProject.setEnabled(fields_filled)
            self.buttonShowJson.setEnabled(fields_filled)

    def testConnection(self):
        if (self.qgsLayerParser.inputsFtpOk(self.inputHost.text(), self.inputUser.text(), self.inputPassword.text())):
            self.qgsLayerParser.connectToFtp(False, False, self.inputHost.text(), self.inputUser.text(), self.inputPassword.text())

    def showOnlineFile(self):
        host = self.inputHost.text()
        path = self.inputJsonPath2.text()
        file = self.inputQgsFile.text() + '.json'
        # add timestamp to path to avoid cache
        webbrowser.open(host + '/' + path + file + '?' + str(datetime.timestamp(datetime.now())))

    def showProject(self):
        host = self.inputHost.text()
        path = self.inputProjectName.text()
        # exception for project ctbb which has different sub projects
        if path == 'ctbb':
            path += '/index'
            if self.qgsLayerParser.projectFilename != 'poum':
                path += '_' + self.qgsLayerParser.projectFilename.replace('.qgs', '')
            path += '.php'
        webbrowser.open(host + '/' + path)

    def help(self):
        '''Display a help page'''
        url = QUrl.fromLocalFile(os.path.dirname(__file__) + "/docs/index.html#conf").toString()
        webbrowser.open(url, new=2)
